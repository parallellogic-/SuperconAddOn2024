const GPIO_TypeDef* GPIOx_buffer[LED_COUNT][2]={//[0] is HIGH mat, [1] is LOW mat
	{GPIOC,GPIOC},{GPIOC,GPIOC},{GPIOC,GPIOD},//LED1 RGB
	{GPIOC,GPIOC},{GPIOC,GPIOC},{GPIOC,GPIOD},//LED2 RGB
	{GPIOC,GPIOC},{GPIOC,GPIOC},{GPIOC,GPIOD},//LED3 RGB
	{GPIOC,GPIOC},{GPIOC,GPIOC},{GPIOC,GPIOC},//LED4 RGB
	{GPIOC,GPIOC},{GPIOC,GPIOC},{GPIOC,GPIOC},//LED5 RGB
	{GPIOD,GPIOC},{GPIOD,GPIOC},{GPIOD,GPIOC},//LED6 RGB
	{GPIOA,GPIOA},//DEBUG LED19, negative terminal unused
	{GPIOC,GPIOC},//LED7
	{GPIOC,GPIOC},//LED8
	{GPIOC,GPIOC},//LED9
	{GPIOC,GPIOC},//LED10
	{GPIOC,GPIOC},//LED11
	{GPIOC,GPIOC},//LED12
	{GPIOC,GPIOC},//LED13
	{GPIOD,GPIOC},//LED14
	{GPIOC,GPIOC},//LED15
	{GPIOD,GPIOC},//LED16
	{GPIOC,GPIOD},//LED17
	{GPIOC,GPIOD}//LED18
};

const GPIO_Pin_TypeDef PortPin_buffer[LED_COUNT][2]={
	{GPIO_PIN_3,GPIO_PIN_6},{GPIO_PIN_3,GPIO_PIN_7},{GPIO_PIN_3,GPIO_PIN_2},//LED1 RGB
	{GPIO_PIN_4,GPIO_PIN_6},{GPIO_PIN_4,GPIO_PIN_7},{GPIO_PIN_4,GPIO_PIN_2},//LED2 RGB
	{GPIO_PIN_5,GPIO_PIN_6},{GPIO_PIN_5,GPIO_PIN_7},{GPIO_PIN_5,GPIO_PIN_2},//LED3 RGB
	{GPIO_PIN_6,GPIO_PIN_3},{GPIO_PIN_6,GPIO_PIN_4},{GPIO_PIN_6,GPIO_PIN_5},//LED4 RGB
	{GPIO_PIN_7,GPIO_PIN_3},{GPIO_PIN_7,GPIO_PIN_4},{GPIO_PIN_7,GPIO_PIN_5},//LED5 RGB
	{GPIO_PIN_2,GPIO_PIN_3},{GPIO_PIN_2,GPIO_PIN_4},{GPIO_PIN_2,GPIO_PIN_5},//LED6 RGB
	{GPIO_PIN_3,GPIO_PIN_3},//DEBUG 
	{GPIO_PIN_4,GPIO_PIN_3},//LED7
	{GPIO_PIN_5,GPIO_PIN_3},//LED8
	{GPIO_PIN_3,GPIO_PIN_4},//LED9
	{GPIO_PIN_5,GPIO_PIN_4},//LED10
	{GPIO_PIN_3,GPIO_PIN_5},//LED11
	{GPIO_PIN_4,GPIO_PIN_5},//LED12
	{GPIO_PIN_7,GPIO_PIN_6},//LED13
	{GPIO_PIN_2,GPIO_PIN_6},//LED14
	{GPIO_PIN_6,GPIO_PIN_7},//LED15
	{GPIO_PIN_2,GPIO_PIN_7},//LED16
	{GPIO_PIN_6,GPIO_PIN_2},//LED17
	{GPIO_PIN_7,GPIO_PIN_2}//LED18
};
const u8 DEBUG_LED_INDEX=6;



@far @interrupt void TIM2_UPD_OVF_IRQHandler (void) {
	bool buffer_index=pwm_state&0x01;//primary vs redundant side to pull data from
	TIM2->SR1&=~TIM2_SR1_UIF;//reset interrupt
	api_counter++;//millisecond-ish counter
	set_next_led();//enables DC power output to one LED
	if(pwm_led_index>=pwm_led_count[buffer_index])
	{//if reached end of LED list...
		pwm_led_index=0;//restart to showing the first LED
		if(pwm_state&0x02) pwm_state^=0x03;//if flag to swap A/B is set, then clear the flag and swap sides
	}
}

@far @interrupt void TIM2_CapComp_IRQ_Handler (void) {
	TIM2->SR1&=~TIM2_SR1_CC1IF;//reset interrupt
	set_matrix_high_z();//clear display ( display is OFF for (PWM_MAX_PERIOD-brightness) milliseconds )
}

void set_next_led()
{
	bool buffer_index=pwm_state&0x01;//primary vs redundant side to pull data from
	u8 visible_index=visible_index_buffer[pwm_led_index][buffer_index];//pwm_led_index ranges from 0 to pwm_led_count[buffer_index]-1 (a variable number), whereas visible_index is 0 to LED_COUNT-1 (constant).  This step translates between the variable leds to display, and the fixed memory of where the LEDs are
	GPIO_TypeDef* GPIOx_high=GPIOx_buffer[visible_index][0];
	GPIO_Pin_TypeDef PortPin_high=PortPin_buffer[visible_index][0];
	GPIO_TypeDef* GPIOx_low=GPIOx_buffer[visible_index][1];
	GPIO_Pin_TypeDef PortPin_low=PortPin_buffer[visible_index][1];
	if(visible_index==255)
		return//if OFF/invalid LED command, skip
	TIM2->CCR1L = pwm_brightness_buffer[visible_index];//set the brightness (how long LED is ON for)
	GPIO_Init(GPIOx_high, PortPin_high, GPIO_MODE_OUT_PP_HIGH_SLOW);
	if(pwm_led_index!=DEBUG_LED_INDEX) GPIO_Init(GPIOx_low,  PortPin_low,  GPIO_MODE_OUT_PP_LOW_SLOW);
	pwm_led_index++;
}